server.port=8080
spring.application.name=sharding-jdbc

# mybatis 配置
# 如果指定了全局配置文件，会和下面的mybatis.configuration.*配置冲突
#mybatis.config-location=classpath:/mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:/mybatis/mapper/*.xml
# 驼峰命名规范
mybatis.configuration.map-underscore-to-camel-case=true
# 日志输出
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
#mybatis.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl

# sharding jdbc 配置
spring.shardingsphere.props.sql.show=true

spring.shardingsphere.datasource.names=master0,master0slave0,master0slave1

spring.shardingsphere.datasource.master0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0.use-global-data-source-stat=true
spring.shardingsphere.datasource.master0.initial-size=5
spring.shardingsphere.datasource.master0.max-active=10
spring.shardingsphere.datasource.master0.min-idle=1
spring.shardingsphere.datasource.master0.url=jdbc:mysql://114.116.49.114:3306/master0?useSSL=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.master0.username=root
spring.shardingsphere.datasource.master0.password=Root@123456

spring.shardingsphere.datasource.master0slave0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0slave0.use-global-data-source-stat=true
spring.shardingsphere.datasource.master0slave0.url=jdbc:mysql://114.116.49.114:3306/master0slave0?useSSL=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.master0slave0.username=root
spring.shardingsphere.datasource.master0slave0.password=Root@123456

spring.shardingsphere.datasource.master0slave1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0slave1.use-global-data-source-stat=true
spring.shardingsphere.datasource.master0slave1.url=jdbc:mysql://114.116.49.114:3306/master0slave1?useSSL=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.master0slave1.username=root
spring.shardingsphere.datasource.master0slave1.password=Root@123456

#主从配置
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=master0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=master0slave0,master0slave1

# 分库策略（前面配置了主从，这里用ds来区分数据源）
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{0}

# employee表的分表策略
# 配置数据节点，声明数据表的分布情况
spring.shardingsphere.sharding.tables.employee.actual-data-nodes=ds$->{0}.employee$->{0..1}
# 配置id生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.employee.key-generator.column=id
spring.shardingsphere.sharding.tables.employee.key-generator.type=SNOWFLAKE
# 配置分片策略，分片策略包括分片键和分片算法
spring.shardingsphere.sharding.tables.employee.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.employee.table-strategy.inline.algorithm-expression=employee$->{id % 2}

# order表的分表策略.按照creat_time字段分表
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0}.t_order_$->{0}
spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
# 根据指定的字段使用自定义分片策略
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column=creat_time
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.zzdz.shardingjdbc.sharding.TimeShardingTableAlgorithm
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name=com.zzdz.shardingjdbc.sharding.TimeRangeShardingAlgorithm